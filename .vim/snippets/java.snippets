snippet main
	public static void main (String [] args) {
		${1:/* code */}
	}
snippet pu
	public
snippet po
	protected
snippet pr
	private
snippet st
	static
snippet fi
	final
snippet ab
	abstract
snippet re
	return
snippet br
	break;
snippet de
	default:
		${1}
snippet ca
	catch(${1:Exception} ${2:e}) ${3}
snippet th
	throw 
snippet sy
	synchronized
snippet im
	import
snippet j.u
	java.util
snippet j.i
	java.io.
snippet j.b
	java.beans.
snippet j.n
	java.net.
snippet j.m
	java.math.
snippet if
	if (${1:condition}) {
		${2://code}
	}
snippet el
	else {
		${1://code}
	}
snippet elif
	else if (${1:condition}) {
		${2://code}
	}
snippet wh

	while (${1:condition}) {
		${2:increment}
		
	} 
snippet for
	for (${1}; ${2}; ${3}) {
		${4://code}
	}
snippet fore

	for (${1} : ${2}) {
		${3://code}
	}
snippet sw
	switch (${1}) {
		${2://code}
	}
snippet cs

	case ${1}:
		${2}
	break;
snippet tc
	public class ${1:`Filename()`} extends ${2:TestCase}
snippet t
	public void test${1:Name}() throws Exception ${2}
snippet cl
	class ${1:`Filename("", "untitled")`} {
		public $1() {
		
		}		


		${2://code}

	} 

snippet cle
	class ${1:`Filename("", "untitled")`} extends ${2:Parent} {
	 	public $1() {
		
		}		

		${3://code}
	}i 

snippet pcle
	public class ${1:` Filename("", "untitled")`} extends ${2:Parent} {
		public $1 () {
			super();
		}

		${3://code}
	}
snippet pcl
	public class ${1:`Filename("", "untitled")`} {
		public ${1:` Filename("", "untitled")`}() {
		
		}

		${2: //code}
	} 

snippet in
	interface ${1:`Filename("", "untitled")`} ${2:extends Parent}${3}
snippet m
	${1:void} ${2:method}(${3}) ${4:throws }{
		${5://code}

	}
snippet v
	${1:String} ${2:var}${3: = null}${4};${5}
snippet co
	static public final ${1:String} ${2:var} = ${3};${4}
snippet cos
	static public final String ${1:var} = "${2}";${3}
snippet as
	assert ${1:test} : "${2:Failure message}";${3}

snippet try
	try {
	
	} catch(${1:Exception} ${2:e}) {
		
	} finally {

	}

snippet sysout
	System.out.println("${1:message}");
snippet com
	// ${1:comment}
snippet comm
	/* ${1:comment} */
snippet doc
	/**
	* @author: Andrei Ro
	* @description: ${1:document}
	* @version: ${2:1.0}
	*/

snippet setter
	public void set${1:property}(${2:type} ${3:name}) {
		this.$3 = $3;
	} 
snippet getter
	public ${1:type} get${2:prop}() {
		return this.$2;
	}
